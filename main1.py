import numpy as np
from PIL import Image, ImageSequence
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
import cv2, io, tempfile, os
from rlottie_python import LottieAnimation  # <- –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è TGS

TOKEN = "7970689984:AAEovaKrRUn1PzbbwNy-YY7GfZjQCQEU9X4"

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def handle_media(update: Update, frames: list[np.ndarray]):
    user = update.effective_user
    print(f"[MEDIA] –æ—Ç {user.username or user.id}, –∫–∞–¥—Ä–æ–≤: {len(frames)}")
    for i, frame in enumerate(frames[:5]):
        print(f"–ö–∞–¥—Ä {i}: {frame.shape if frame is not None else 'None'}")
    
    if frames:
        success, buffer = cv2.imencode('.jpg', frames[0])
        if success:
            await update.message.reply_photo(
                photo=buffer.tobytes(),
                caption=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤\n–†–∞–∑–º–µ—Ä: {frames[0].shape[1]}x{frames[0].shape[0]}"
            )
        else:
            await update.message.reply_text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

def gif_to_frames(file_bytes: bytes) -> list[np.ndarray]:
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ GIF"""
    frames = []
    try:
        with Image.open(io.BytesIO(file_bytes)) as im:
            for frame in ImageSequence.Iterator(im):
                frame = frame.convert("RGB")
                arr = np.array(frame)
                arr = cv2.cvtColor(arr, cv2.COLOR_RGB2BGR)
                frames.append(arr)
    except Exception as e:
        print("gif_to_frames –æ—à–∏–±–∫–∞:", e)
    return frames

def video_to_frames(file_bytes: bytes, ext: str = ".mp4") -> list[np.ndarray]:
    frames = []
    try:
        with tempfile.NamedTemporaryFile(suffix=ext, delete=False) as tmp:
            tmp.write(file_bytes)
            tmp.flush()
            
            cap = cv2.VideoCapture(tmp.name)
            if not cap.isOpened():
                print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞")
                return frames
                
            while True:
                ret, frame = cap.read()
                if not ret:
                    break
                frames.append(frame)
            cap.release()
            
        os.unlink(tmp.name)
    except Exception as e:
        print("video_to_frames –æ—à–∏–±–∫–∞:", e)
    return frames

def tgs_to_frames_rlottie(file_bytes: bytes, scale: int = 2) -> list[np.ndarray]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TGS —á–µ—Ä–µ–∑ rlottie-python"""
    frames = []
    try:
        with tempfile.NamedTemporaryFile(suffix='.tgs', delete=False) as tmp:
            tmp.write(file_bytes)
            tmp.flush()
            tmp_path = tmp.name

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ rlottie
        animation = LottieAnimation.from_tgs(tmp_path)

        total_frames = animation.lottie_animation_get_totalframe()
        width, height = int(animation.lottie_animation_get_size()[0] * scale), int(animation.lottie_animation_get_size()[1] * scale)

        frames = []

        for i in range(total_frames):
            # –ü–æ–ª—É—á–∞–µ–º raw –±–∞–π—Ç—ã RGBA
            raw = animation.lottie_animation_render(frame_num=i, width=width, height=height)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bytes –≤ numpy array
            arr = np.frombuffer(raw, dtype=np.uint8).reshape((height, width, 4))  # 4 –∫–∞–Ω–∞–ª–∞: RGBA
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ BGR –¥–ª—è OpenCV
            img = cv2.cvtColor(arr, cv2.COLOR_RGBA2RGB)
            
            frames.append(img)

        os.unlink(tmp_path)
    except Exception as e:
        print("tgs_to_frames_rlottie –æ—à–∏–±–∫–∞:", e)
    return frames

def webp_to_frames(file_bytes: bytes) -> list[np.ndarray]:
    frames = []
    try:
        from PIL import Image, ImageSequence
        with Image.open(io.BytesIO(file_bytes)) as im:
            if getattr(im, 'is_animated', False):
                for frame in ImageSequence.Iterator(im):
                    frame = frame.convert("RGB")
                    arr = np.array(frame)
                    arr = cv2.cvtColor(arr, cv2.COLOR_RGB2BGR)
                    frames.append(arr)
            else:
                img = im.convert("RGB")
                arr = np.array(img)
                arr = cv2.cvtColor(arr, cv2.COLOR_RGB2BGR)
                frames.append(arr)
    except Exception as e:
        print("webp_to_frames –æ—à–∏–±–∫–∞:", e)
    return frames

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
        
    msg = update.message
    frames = []

    try:
        if msg.photo:
            file = await msg.photo[-1].get_file()
            file_bytes = await file.download_as_bytearray()
            img = cv2.imdecode(np.frombuffer(file_bytes, np.uint8), cv2.IMREAD_COLOR)
            if img is not None:
                frames = [img]

        elif msg.document:
            file = await msg.document.get_file()
            file_bytes = await file.download_as_bytearray()
            ext = os.path.splitext(msg.document.file_name or "")[1].lower()

            if msg.document.mime_type == "image/gif" or ext == ".gif":
                frames = gif_to_frames(file_bytes)
                if not frames:
                    frames = video_to_frames(file_bytes, ".mp4")
            elif ext == ".webp":
                frames = webp_to_frames(file_bytes)
            else:
                img = cv2.imdecode(np.frombuffer(file_bytes, np.uint8), cv2.IMREAD_COLOR)
                if img is not None:
                    frames = [img]

        elif msg.video:
            file = await msg.video.get_file()
            file_bytes = await file.download_as_bytearray()
            frames = video_to_frames(file_bytes, ".mp4")

        elif msg.animation:
            file = await msg.animation.get_file()
            file_bytes = await file.download_as_bytearray()
            frames = video_to_frames(file_bytes, ".mp4")

        elif msg.sticker:
            file = await msg.sticker.get_file()
            file_bytes = await file.download_as_bytearray()
            if msg.sticker.is_animated:
                frames = tgs_to_frames_rlottie(file_bytes)
            elif msg.sticker.is_video:
                frames = video_to_frames(file_bytes, ".webm")
            else:
                frames = webp_to_frames(file_bytes)

        if frames:
            await handle_media(update, frames)
        else:
            await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        await msg.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "üì∑ - –§–æ—Ç–æ\n"
        "üéûÔ∏è - GIF\n"
        "üìπ - –í–∏–¥–µ–æ\n"
        "ü§ñ - –°—Ç–∏–∫–µ—Ä (–≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )

# --- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
